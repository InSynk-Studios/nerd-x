{"version":3,"sources":["assets/nerdx.svg","helpers.js","store/selectors.js","components/Navbar.js","store/actions.js","store/interactions.js","components/Spinner.js","components/Balance.js","components/MyTransactions.js","components/NewOrder.js","components/OrderBook.js","components/PriceChart.config.js","components/PriceChart.js","components/Trades.js","components/Content.js","components/App.js","store/reducers.js","store/configureStore.js","reportWebVitals.js","index.js"],"names":["ETHER_ADDRESS","GREEN","RED","DECIMALS","ether","wei","formatBalance","balance","Math","round","web3Selector","createSelector","state","get","w","account","accountSelector","tokenLoaded","tokenSelector","tl","t","exchangeLoaded","exchangeSelector","el","e","contractsLoadedSelector","cancelledOrdersLoaded","cancelledOrders","loaded","filledOrdersLoaded","o","filledOrdersLoadedSelector","filledOrders","filledOrdersSelector","orders","sort","a","b","timestamp","decorateFilledOrders","previousOrder","map","order","decorateOrder","decorateFilledOrder","etherAmount","tokenAmount","tokenGive","amountGive","amountGet","n","precision","tokenPrice","formattedTimestamp","moment","unix","format","tokenPriceClass","id","orderId","openOrders","all","allOrders","cancelled","filled","reject","orderFilled","some","orderCancelled","orderBookLoaded","allOrdersLoaded","orderBookLoadedSelector","orderBookSelector","decorateOrderBookOrders","groupBy","buyOrders","sellOrders","decorateOrderBookOrder","orderType","orderTypeClass","orderFillAction","myFilledOrdersLoadedSelector","myFilledOrdersSelector","filter","user","userFill","decorateMyFilledOrders","decorateMyFilledOrder","orderSign","myOpenOrdersLoadedSelector","myOpenOrdersSelector","decorateMyOpenOrders","decorateMyOpenOrder","priceChartLoadedSelector","priceChartSelector","secondLastOrder","lastOrder","slice","length","lastPrice","lastPriceChange","series","data","buildGraphData","startOf","Object","keys","hour","group","open","high","maxBy","low","minBy","close","x","Date","y","orderCancellingSelector","status","orderFillingSelector","balancesLoadingSelector","etherBalanceSelector","tokenBalanceSelector","exchangeEtherBalanceSelector","exchangeTokenBalanceSelector","etherDepositAmountSelector","amount","etherWithdrawAmountSelector","tokenDepositAmountSelector","tokenWithdrawAmountSelector","buyOrderSelector","sellOrderSelector","Navbar","className","href","style","height","display","src","logo","alt","top","this","props","target","rel","Component","connect","web3AccountLoaded","type","tokenBalanceLoaded","exchangeEtherBalanceLoaded","exchangeTokenBalanceLoaded","loadWeb3","dispatch","web3","Web3","window","ethereum","connection","loadAccount","eth","getAccounts","accounts","loadToken","networkId","token","Contract","Token","abi","networks","address","contract","console","log","loadExchange","exchange","Exchange","loadAllOrders","getPastEvents","fromBlock","toBlock","cancelStream","event","returnValues","tradeStream","orderStream","cancelOrder","methods","send","from","on","hash","error","alert","fillOrder","subscribeToEvents","events","Cancel","err","Trade","Deposit","Withdraw","Order","loadBalances","getBalance","etherBalance","balanceOf","call","tokenBalance","exchangeEtherBalance","options","exchangeTokenBalance","renderForm","etherDepositAmount","etherWithdrawAmount","tokenDepositAmount","tokenWithdrawAmount","Tabs","defaultActiveKey","Tab","eventKey","title","onSubmit","preventDefault","depositEther","value","utils","toWei","placeholder","onChange","required","approve","depositToken","withdrawEther","withdrawToken","Balance","loadBlockchainData","showForm","Spinner","balancesLoading","renderMyFilledOrders","myFilledOrders","renderMyOpenOrders","myOpenOrders","onClick","showMyFilledOrders","showMyOpenOrders","myOpenOrdersLoaded","orderCancelling","buyOrder","sellOrder","showBuyTotal","showSellTotal","tokenGet","price","toString","makeOrder","makeBuyOrder","makeSellOrder","NewOrder","making","renderOrder","OverlayTrigger","placement","overlay","Tooltip","renderOrderBook","orderBook","OrderBook","showOrderBook","orderFilling","chartOptions","chart","animations","enabled","toolbar","show","width","plotOptions","candlestick","colors","upward","downward","tooltip","theme","fontSize","fontFamily","undefined","formatter","marker","items","fixed","position","offsetX","offsetY","xaxis","labels","cssClass","yaxis","minWidth","maxWidth","rotate","renderPriceChart","priceChart","PriceChart","priceChartLoaded","Trades","Content","MyTransactions","App","net","getId","contractsLoaded","rootReducer","combineReducers","action","findIndex","loggerMiddleware","createLogger","middleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","preloadedState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96c7232e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/nerdx.da76ced8.svg\";","export const ETHER_ADDRESS = \"0x0000000000000000000000000000000000000000\"\r\nexport const GREEN = 'success'\r\nexport const RED = 'danger'\r\nexport const DECIMALS = (10 ** 18)\r\n\r\nexport const ether = (wei) => {\r\n  if (wei) {\r\n    return (wei / DECIMALS) // 18 decimal places\r\n  }\r\n}\r\n\r\nexport const formatBalance = (balance) => {\r\n  const precision = 100 // 2 decimal places\r\n  balance = ether(balance)\r\n  balance = Math.round(balance * precision) / precision // Use 2 decimal places\r\n  return balance\r\n}\r\n\r\nexport const tokens = (n) => ether(n)","/**\r\n * For personal reference,\r\n * (Reselect) Selectors, in React, are very much similar to getters in Vuex.\r\n * You can use these selectors to get data from the state,\r\n * and you can do any kind of filtering/modification of that data.\r\n */\r\n\r\nimport { get, groupBy, maxBy, minBy, reject } from 'lodash'\r\nimport moment from 'moment'\r\nimport { createSelector } from 'reselect'\r\nimport { ETHER_ADDRESS, tokens, ether, GREEN, RED, formatBalance } from '../helpers'\r\n\r\nconst web3 = state => get(state, 'web3.connection')\r\nexport const web3Selector = createSelector(web3, w => w)\r\n\r\nconst account = state => get(state, 'web3.account') // Basically, `state.web3.account`. \r\nexport const accountSelector = createSelector(account, account => account)\r\n\r\nconst tokenLoaded = state => get(state, 'token.loaded', false)\r\nexport const tokenLoadedSelector = createSelector(tokenLoaded, tl => tl)\r\n\r\nconst token = state => get(state, 'token.contract')\r\nexport const tokenSelector = createSelector(token, t => t)\r\n\r\nconst exchangeLoaded = state => get(state, 'exchange.loaded', false)\r\nexport const exchangeLoadedSelector = createSelector(exchangeLoaded, el => el)\r\n\r\nconst exchange = state => get(state, 'exchange.contract')\r\nexport const exchangeSelector = createSelector(exchange, e => e)\r\n\r\nexport const contractsLoadedSelector = createSelector(\r\n  tokenLoaded,\r\n  exchangeLoaded,\r\n  (tl, el) => (tl && el)\r\n)\r\n\r\n// All Orders\r\nconst allOrdersLoaded = state => get(state, 'exchange.allOrders.loaded', false)\r\nconst allOrders = state => get(state, 'exchange.allOrders.data', [])\r\n\r\n// Cancelled Orders Selectors\r\nconst cancelledOrdersLoaded = state => get(state, 'exchange.cancelledOrders.loaded', false)\r\nexport const cancelledOrdersLoadedSelector = createSelector(cancelledOrdersLoaded, loaded => loaded)\r\n\r\nconst cancelledOrders = state => get(state, 'exchange.cancelledOrders.data', [])\r\nexport const cancelledOrdersSelector = createSelector(cancelledOrders, o => o)\r\n\r\n// Filled Orders Selectors\r\nconst filledOrdersLoaded = state => get(state, 'exchange.filledOrders.loaded', false)\r\nexport const filledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\r\n\r\nconst filledOrders = state => get(state, 'exchange.filledOrders.data', [])\r\nexport const filledOrdersSelector = createSelector(filledOrders, (orders) => {\r\n  // Sort orders by date ascending for price comparison\r\n  orders = orders.sort((a, b) => a.timestamp - b.timestamp)\r\n\r\n  orders = decorateFilledOrders(orders)\r\n\r\n  // Sort orders by date descending for display\r\n  orders = orders.sort((a, b) => b.timestamp - a.timestamp)\r\n  return orders\r\n})\r\n\r\nconst decorateFilledOrders = (orders) => {\r\n  // Track previous order to compare history\r\n  let previousOrder = orders[0];\r\n  return (\r\n    orders.map((order) => {\r\n      order = decorateOrder(order)\r\n      order = decorateFilledOrder(order, previousOrder)\r\n      previousOrder = order // Update the previous order once it's decorated\r\n      return order\r\n    })\r\n  )\r\n}\r\n\r\nconst decorateOrder = (order) => {\r\n  // Calculate token and ether amount\r\n  let etherAmount, tokenAmount;\r\n\r\n  if (order.tokenGive === ETHER_ADDRESS) {\r\n    etherAmount = order.amountGive;\r\n    tokenAmount = order.amountGet;\r\n  } else {\r\n    etherAmount = order.amountGet;\r\n    tokenAmount = order.amountGive;\r\n  }\r\n\r\n  // Calculate token price to 5 decimal places\r\n  const precision = 100000\r\n  let tokenPrice = etherAmount / tokenAmount; // How many ether per token, is the price.\r\n  tokenPrice = Math.round(tokenPrice * precision) / precision;\r\n\r\n  return ({\r\n    ...order,\r\n    etherAmount: ether(etherAmount),\r\n    tokenAmount: tokens(tokenAmount),\r\n    tokenPrice,\r\n    formattedTimestamp: moment.unix(order.timestamp).format('h:mm:ss a M/D')\r\n  })\r\n}\r\n\r\nconst decorateFilledOrder = (order, previousOrder) => {\r\n  return ({\r\n    ...order,\r\n    tokenPriceClass: tokenPriceClass(order.tokenPrice, order.id, previousOrder)\r\n  })\r\n}\r\n\r\nconst tokenPriceClass = (tokenPrice, orderId, previousOrder) => {\r\n  // Show green price if only one order exists\r\n  if (previousOrder.id === orderId) {\r\n    return GREEN\r\n  }\r\n  if (previousOrder.tokenPrice <= tokenPrice) {\r\n    // Show green price if order price higher than previous order price\r\n    return GREEN\r\n  } else {\r\n    // Show red price if order price lower than previous order price\r\n    return RED\r\n  }\r\n}\r\n\r\n/**\r\n * Order book is basically the orders that are not cancelled and not fullfilled.\r\n * `The pending orders!`\r\n * So, \r\n * orderBook = allOrders - filledOrders - cancelledOrders\r\n */\r\n\r\nconst openOrders = state => {\r\n  const all = allOrders(state)\r\n  const cancelled = cancelledOrders(state)\r\n  const filled = filledOrders(state)\r\n\r\n  const openOrders = reject(all, (order) => {\r\n    const orderFilled = filled.some((o) => o.id === order.id)\r\n    const orderCancelled = cancelled.some((o) => o.id === order.id)\r\n    return (orderFilled || orderCancelled)\r\n  })\r\n\r\n  return openOrders\r\n}\r\n\r\nconst orderBookLoaded = state => cancelledOrdersLoaded(state) && filledOrdersLoaded(state) && allOrdersLoaded(state)\r\nexport const orderBookLoadedSelector = createSelector(orderBookLoaded, loaded => loaded)\r\n\r\n// Create the order book\r\nexport const orderBookSelector = createSelector(\r\n  openOrders,\r\n  (orders) => {\r\n    // Decorate the orders\r\n    orders = decorateOrderBookOrders(orders)\r\n    // Group orders by `orderType`\r\n    orders = groupBy(orders, 'orderType')\r\n\r\n    // Fetch buy orders\r\n    const buyOrders = get(orders, 'buy', [])\r\n    // Sort buy orders by token price\r\n    orders = {\r\n      ...orders,\r\n      buyOrders: buyOrders.sort((a, b) => b.tokenPrice = a.tokenPrice)\r\n    }\r\n\r\n    // Fetch sell orders\r\n    const sellOrders = get(orders, 'sell', [])\r\n    // Sort sell orders by token price\r\n    orders = {\r\n      ...orders,\r\n      sellOrders: sellOrders.sort((a, b) => b.tokenPrice = a.tokenPrice)\r\n    }\r\n    return orders\r\n  }\r\n)\r\n\r\nconst decorateOrderBookOrders = (orders) => {\r\n  return (\r\n    orders.map((order) => {\r\n      order = decorateOrder(order)\r\n      order = decorateOrderBookOrder(order)\r\n      return order\r\n    })\r\n  )\r\n}\r\n\r\n/**\r\n * If tokenGive is ether then it's a buy order, \r\n * else it's a sell order\r\n */\r\n\r\nconst decorateOrderBookOrder = (order) => {\r\n  const orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\r\n  return ({\r\n    ...order,\r\n    orderType,\r\n    orderTypeClass: (orderType === 'buy') ? GREEN : RED,\r\n    orderFillAction: (orderType === 'buy') ? 'sell' : 'buy',\r\n  })\r\n}\r\n\r\nexport const myFilledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\r\n\r\nexport const myFilledOrdersSelector = createSelector(\r\n  account,\r\n  filledOrders,\r\n  (account, orders) => {\r\n    // Find our orders (We either created them or filled them)\r\n    orders = orders.filter((o) => o.user === account || o.userFill === account)\r\n    // Sort date ascending\r\n    orders = orders.sort((a, b) => a.timestamp - b.timestamp)\r\n    // Decorate orders - add display attributes\r\n    orders = decorateMyFilledOrders(orders, account)\r\n    return orders\r\n  }\r\n)\r\n\r\nconst decorateMyFilledOrders = (orders, account) => {\r\n  return (\r\n    orders.map((order) => {\r\n      order = decorateOrder(order)\r\n      order = decorateMyFilledOrder(order, account)\r\n      return order\r\n    })\r\n  )\r\n}\r\n\r\nconst decorateMyFilledOrder = (order, account) => {\r\n  const myOrder = order.user === account\r\n\r\n  let orderType\r\n  if (myOrder) {\r\n    orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\r\n  } else {\r\n    orderType = order.tokenGive === ETHER_ADDRESS ? 'sell' : 'buy'\r\n  }\r\n\r\n  return ({\r\n    ...order,\r\n    orderType,\r\n    orderTypeClass: (orderType === 'buy' ? GREEN : RED),\r\n    orderSign: (orderType === 'buy' ? '+' : '-')\r\n  })\r\n}\r\n\r\nexport const myOpenOrdersLoadedSelector = createSelector(orderBookLoaded, loaded => loaded)\r\n\r\nexport const myOpenOrdersSelector = createSelector(\r\n  account,\r\n  openOrders,\r\n  (account, orders) => {\r\n    // Filter orders created by current account\r\n    orders = orders.filter((o) => o.user === account)\r\n    // Decorate orders - add display attributes\r\n    orders = decorateMyOpenOrders(orders, account)\r\n    // Sort orders by date descending\r\n    orders = orders.sort((a, b) => b.timestamp - a.timestamp)\r\n    return orders\r\n  }\r\n)\r\n\r\nconst decorateMyOpenOrders = (orders, account) => {\r\n  return (\r\n    orders.map((order) => {\r\n      order = decorateOrder(order)\r\n      order = decorateMyOpenOrder(order, account)\r\n      return order\r\n    })\r\n  )\r\n}\r\n\r\nconst decorateMyOpenOrder = (order, account) => {\r\n  let orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\r\n\r\n  return ({\r\n    ...order,\r\n    orderType,\r\n    orderTypeClass: (orderType === 'buy' ? GREEN : RED)\r\n  })\r\n}\r\n\r\nexport const priceChartLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\r\n\r\nexport const priceChartSelector = createSelector(\r\n  filledOrders,\r\n  (orders) => {\r\n    // Sort by ascending date to compare history\r\n    orders = orders.sort((a, b) => a.timestamp - b.timestamp)\r\n    // Decorate ordes - add display attributes\r\n    orders = orders.map((o) => decorateOrder(o))\r\n    // Get last two orders final price & price change\r\n    let secondLastOrder, lastOrder\r\n    [secondLastOrder, lastOrder] = orders.slice(orders.length - 2, orders.length)\r\n    // Get last order price\r\n    const lastPrice = get(lastOrder, 'tokenPrice', 0)\r\n    // Get second last order price\r\n    const secondLastPrice = get(secondLastOrder, 'tokenPrice', 0)\r\n\r\n    return ({\r\n      lastPrice,\r\n      lastPriceChange: (lastPrice >= secondLastPrice ? '+' : '-'),\r\n      series: [{\r\n        data: buildGraphData(orders)\r\n      }]\r\n    })\r\n  }\r\n)\r\n\r\n/**\r\n * Group the orders into a format that is grouped by hour, \r\n * so each candle will be an hour. \r\n */\r\nconst buildGraphData = (orders) => {\r\n  // Group the orders by hour for the graph\r\n  orders = groupBy(orders, (o) => moment.unix(o.timestamp).startOf('hour'))\r\n  // Get each hour where data exists\r\n  const hours = Object.keys(orders)\r\n  // Build the graph series\r\n  const graphData = hours.map((hour) => {\r\n    // Fetch all the orders from current hour\r\n    const group = orders[hour]\r\n    // Calculate price values - open, high, low, close\r\n    const open = group[0] // first order\r\n    const high = maxBy(group, 'tokenPrice') // high price\r\n    const low = minBy(group, 'tokenPrice') // low price\r\n    const close = group[group.length - 1] // last order\r\n\r\n    return ({\r\n      x: new Date(hour), // This will be the hour where data exists\r\n      y: [\r\n        open.tokenPrice,\r\n        high.tokenPrice,\r\n        low.tokenPrice,\r\n        close.tokenPrice\r\n      ] // This will be all the Open, High, Low, Close values\r\n    })\r\n  })\r\n  return graphData\r\n}\r\n\r\nconst orderCancelling = state => get(state, 'exchange.orderCancelling', false)\r\nexport const orderCancellingSelector = createSelector(orderCancelling, status => status)\r\n\r\nconst orderFilling = state => get(state, 'exchange.orderFilling', false)\r\nexport const orderFillingSelector = createSelector(orderFilling, status => status)\r\n\r\n// BALANCES\r\nconst balancesLoading = state => get(state, 'exchange.balancesLoading', true)\r\nexport const balancesLoadingSelector = createSelector(balancesLoading, status => status)\r\n\r\nconst etherBalance = state => get(state, 'web3.balance', 0)\r\nexport const etherBalanceSelector = createSelector(\r\n  etherBalance,\r\n  (balance) => {\r\n    return formatBalance(balance)\r\n  }\r\n)\r\n\r\nconst tokenBalance = state => get(state, 'token.balance', 0)\r\nexport const tokenBalanceSelector = createSelector(\r\n  tokenBalance,\r\n  (balance) => {\r\n    return formatBalance(balance)\r\n  }\r\n)\r\n\r\nconst exchangeEtherBalance = state => get(state, 'exchange.etherBalance', 0)\r\nexport const exchangeEtherBalanceSelector = createSelector(\r\n  exchangeEtherBalance,\r\n  (balance) => {\r\n    return formatBalance(balance)\r\n  }\r\n)\r\n\r\nconst exchangeTokenBalance = state => get(state, 'exchange.tokenBalance', 0)\r\nexport const exchangeTokenBalanceSelector = createSelector(\r\n  exchangeTokenBalance,\r\n  (balance) => {\r\n    return formatBalance(balance)\r\n  }\r\n)\r\n\r\nconst etherDepositAmount = state => get(state, 'exchange.etherDepositAmount', null)\r\nexport const etherDepositAmountSelector = createSelector(etherDepositAmount, amount => amount)\r\n\r\nconst etherWithdrawAmount = state => get(state, 'exchange.etherWithdrawAmount', null)\r\nexport const etherWithdrawAmountSelector = createSelector(etherWithdrawAmount, amount => amount)\r\n\r\nconst tokenDepositAmount = state => get(state, 'exchange.tokenDepositAmount', null)\r\nexport const tokenDepositAmountSelector = createSelector(tokenDepositAmount, amount => amount)\r\n\r\nconst tokenWithdrawAmount = state => get(state, 'exchange.tokenWithdrawAmount', null)\r\nexport const tokenWithdrawAmountSelector = createSelector(tokenWithdrawAmount, amount => amount)\r\n\r\nconst buyOrder = state => get(state, 'exchange.buyOrder', {})\r\nexport const buyOrderSelector = createSelector(buyOrder, order => order)\r\n\r\nconst sellOrder = state => get(state, 'exchange.sellOrder', {})\r\nexport const sellOrderSelector = createSelector(sellOrder, order => order)","import { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport logo from '../assets/nerdx.svg';\r\nimport { accountSelector } from \"../store/selectors\";\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark px-3 position-relative\">\r\n        <a className=\"navbar-brand\" href=\"/#\">\r\n          <span style={{ height: '30px', display: 'block' }}></span>\r\n          <img\r\n            src={logo}\r\n            className=\"App-logo position-absolute\"\r\n            alt=\"logo\"\r\n            style={{\r\n              height: '40px',\r\n              top: '8px'\r\n            }} />\r\n        </a>\r\n        {/* <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button> */}\r\n        <ul className=\"navbar-nav ms-auto\">\r\n          <li className=\"nav-item\">\r\n            <a\r\n              className=\"nav-link small\"\r\n              href={`https://etherscan.io/address/${this.props.account}`}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              {this.props.account}\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    account: accountSelector(state)\r\n  }\r\n}\r\n\r\n// Connect function connects the redux store to our app, \r\n// and allows access to information in component props.\r\nexport default connect(mapStateToProps)(Navbar);\r\n","/**\r\n * For personal reference,\r\n * Actions in Redux are almost entirely similar to actions in Vuex.\r\n * In this file, we are just declaring the actions.\r\n */\r\n\r\n// WEB3\r\nexport function web3Loaded(connection) {\r\n  return {\r\n    type: 'WEB3_LOADED',\r\n    connection\r\n  }\r\n}\r\n\r\nexport function web3AccountLoaded(account) {\r\n  return {\r\n    type: 'WEB3_ACCOUNT_LOADED',\r\n    account\r\n  }\r\n}\r\n\r\n// TOKEN \r\nexport function tokenLoaded(contract) {\r\n  return {\r\n    type: 'TOKEN_LOADED',\r\n    contract\r\n  }\r\n}\r\n\r\n// EXCHANGE\r\nexport function exchangeLoaded(contract) {\r\n  return {\r\n    type: 'EXCHANGE_LOADED',\r\n    contract\r\n  }\r\n}\r\n\r\nexport function cancelledOrdersLoaded(cancelledOrders) {\r\n  return {\r\n    type: 'CANCELLED_ORDERS_LOADED',\r\n    cancelledOrders\r\n  }\r\n}\r\n\r\nexport function filledOrdersLoaded(filledOrders) {\r\n  return {\r\n    type: 'FILLED_ORDERS_LOADED',\r\n    filledOrders\r\n  }\r\n}\r\n\r\nexport function allOrdersLoaded(allOrders) {\r\n  return {\r\n    type: 'ALL_ORDERS_LOADED',\r\n    allOrders\r\n  }\r\n}\r\n\r\nexport function orderCancelling() {\r\n  // We call it cancelling as it means that we have initiated cancel order action,\r\n  // and it's not yet cancelled.\r\n  return {\r\n    type: 'ORDER_CANCELLING'\r\n  }\r\n}\r\n\r\nexport function orderCancelled(order) {\r\n  return {\r\n    type: 'ORDER_CANCELLED',\r\n    order\r\n  }\r\n}\r\n\r\nexport function orderFilling() {\r\n  return {\r\n    type: 'ORDER_FILLING'\r\n  }\r\n}\r\n\r\nexport function orderFilled(order) {\r\n  return {\r\n    type: 'ORDER_FILLED',\r\n    order\r\n  }\r\n}\r\n\r\nexport function etherBalanceLoaded(balance) {\r\n  return {\r\n    type: 'ETHER_BALANCE_LOADED',\r\n    balance\r\n  }\r\n}\r\n\r\nexport function tokenBalanceLoaded(balance) {\r\n  return {\r\n    type: 'TOKEN_BALANCE_LOADED',\r\n    balance\r\n  }\r\n}\r\n\r\nexport function exchangeEtherBalanceLoaded(balance) {\r\n  return {\r\n    type: 'EXCHANGE_ETHER_BALANCE_LOADED',\r\n    balance\r\n  }\r\n}\r\n\r\nexport function exchangeTokenBalanceLoaded(balance) {\r\n  return {\r\n    type: 'EXCHANGE_TOKEN_BALANCE_LOADED',\r\n    balance\r\n  }\r\n}\r\n\r\nexport function balancesLoaded() {\r\n  return {\r\n    type: 'BALANCES_LOADED'\r\n  }\r\n}\r\n\r\nexport function balancesLoading() {\r\n  return {\r\n    type: 'BALANCES_LOADING'\r\n  }\r\n}\r\n\r\nexport function etherDepositAmountChanged(amount) {\r\n  return {\r\n    type: 'ETHER_DEPOSIT_AMOUNT_CHANGED',\r\n    amount\r\n  }\r\n}\r\n\r\nexport function etherWithdrawAmountChanged(amount) {\r\n  return {\r\n    type: 'ETHER_WITHDRAW_AMOUNT_CHANGED',\r\n    amount\r\n  }\r\n}\r\n\r\nexport function tokenDepositAmountChanged(amount) {\r\n  return {\r\n    type: 'TOKEN_DEPOSIT_AMOUNT_CHANGED',\r\n    amount\r\n  }\r\n}\r\n\r\nexport function tokenWithdrawAmountChanged(amount) {\r\n  return {\r\n    type: 'TOKEN_WITHDRAW_AMOUNT_CHANGED',\r\n    amount\r\n  }\r\n}\r\n\r\n// Buy Order\r\nexport function buyOrderAmountChanged(amount) {\r\n  return {\r\n    type: 'BUY_ORDER_AMOUNT_CHANGED',\r\n    amount\r\n  }\r\n}\r\n\r\nexport function buyOrderPriceChanged(price) {\r\n  return {\r\n    type: 'BUY_ORDER_PRICE_CHANGED',\r\n    price\r\n  }\r\n}\r\n\r\nexport function buyOrderMaking(price) {\r\n  return {\r\n    type: 'BUY_ORDER_MAKING'\r\n  }\r\n}\r\n\r\n// Generic Order\r\nexport function orderMade(order) {\r\n  return {\r\n    type: 'ORDER_MADE',\r\n    order\r\n  }\r\n}\r\n\r\n// Sell Order\r\nexport function sellOrderAmountChanged(amount) {\r\n  return {\r\n    type: 'SELL_ORDER_AMOUNT_CHANGED',\r\n    amount\r\n  }\r\n}\r\n\r\nexport function sellOrderPriceChanged(price) {\r\n  return {\r\n    type: 'SELL_ORDER_PRICE_CHANGED',\r\n    price\r\n  }\r\n}\r\n\r\nexport function sellOrderMaking(price) {\r\n  return {\r\n    type: 'SELL_ORDER_MAKING'\r\n  }\r\n}\r\n","/**\r\n * For personal reference,\r\n * This file is used to use actions and \r\n * create `interactions` (A custom terminology, not from React)\r\n * Here, We handle all of our blockchain interactions by dispatching Redux Actions.\r\n */\r\n\r\nimport Web3 from \"web3\"\r\nimport {\r\n  exchangeLoaded,\r\n  tokenLoaded,\r\n  web3AccountLoaded,\r\n  web3Loaded,\r\n  cancelledOrdersLoaded,\r\n  filledOrdersLoaded,\r\n  allOrdersLoaded,\r\n  orderCancelling,\r\n  orderCancelled,\r\n  orderFilling,\r\n  orderFilled,\r\n  etherBalanceLoaded,\r\n  tokenBalanceLoaded,\r\n  exchangeEtherBalanceLoaded,\r\n  exchangeTokenBalanceLoaded,\r\n  balancesLoaded,\r\n  balancesLoading,\r\n  buyOrderMaking,\r\n  sellOrderMaking,\r\n  orderMade\r\n} from \"./actions\"\r\nimport Token from '../abis/Token.json'\r\nimport Exchange from '../abis/Exchange.json'\r\nimport { ETHER_ADDRESS } from \"../helpers\"\r\n\r\nexport const loadWeb3 = (dispatch) => {\r\n  const web3 = new Web3(window.ethereum)\r\n  dispatch(web3Loaded(web3))\r\n  return web3\r\n}\r\n\r\nexport const loadAccount = async (web3, dispatch) => {\r\n  const accounts = await web3.eth.getAccounts()\r\n  const account = accounts[0]\r\n  dispatch(web3AccountLoaded(account))\r\n  return account\r\n}\r\n\r\nexport const loadToken = async (web3, networkId, dispatch) => {\r\n  try {\r\n    const token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address)\r\n    dispatch(tokenLoaded(token))\r\n    return token\r\n  } catch (error) {\r\n    console.log(\"Contract not deployed to the current network. Please select another network in Metamask.\")\r\n    return null\r\n  }\r\n}\r\n\r\nexport const loadExchange = async (web3, networkId, dispatch) => {\r\n  try {\r\n    const exchange = new web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address)\r\n    dispatch(exchangeLoaded(exchange))\r\n    return exchange\r\n  } catch (error) {\r\n    console.log(\"Contract not deployed to the current network. Please select another network in Metamask.\")\r\n    return null\r\n  }\r\n}\r\n\r\nexport const loadAllOrders = async (exchange, dispatch) => {\r\n  // Fetch cancelled orders with the \"Cancel\" event stream\r\n  const cancelStream = await exchange.getPastEvents('Cancel', { fromBlock: 0, toBlock: 'latest' })\r\n  const cancelledOrders = await cancelStream.map((event) => event.returnValues)\r\n  dispatch(cancelledOrdersLoaded(cancelledOrders))\r\n\r\n  // Fetch the filled orders (also called trades) with the \"Trade\" event stream\r\n  const tradeStream = await exchange.getPastEvents('Trade', { fromBlock: 0, toBlock: 'latest' })\r\n  const filledOrders = await tradeStream.map((event) => event.returnValues)\r\n  dispatch(filledOrdersLoaded(filledOrders))\r\n\r\n  // Fetch all orders with the \"Order\" event stream\r\n  const orderStream = await exchange.getPastEvents('Order', { fromBlock: 0, toBlock: 'latest' })\r\n  const allOrders = await orderStream.map((event) => event.returnValues)\r\n  dispatch(allOrdersLoaded(allOrders))\r\n}\r\n\r\nexport const cancelOrder = async (dispatch, exchange, order, account) => {\r\n  /** \r\n   * We are using the event emitter approach to handle this async call.\r\n   * This means we have access to several lifecyle (of a transaction) events.\r\n   */\r\n  exchange.methods.cancelOrder(order.id).send({ from: account })\r\n    .on('transactionHash', (hash) => {\r\n      /**\r\n       * This event means, that transaction has occurred and \r\n       * we get the transaction hash now.\r\n       */\r\n      dispatch(orderCancelling())\r\n    })\r\n    .on('error', (error) => {\r\n      console.log(error)\r\n      window.alert('There was an error.')\r\n    })\r\n}\r\n\r\nexport const fillOrder = async (dispatch, exchange, order, account) => {\r\n  /** \r\n   * We are using the event emitter approach to handle this async call.\r\n   * This means we have access to several lifecyle (of a transaction) events.\r\n   */\r\n  exchange.methods.fillOrder(order.id).send({ from: account })\r\n    .on('transactionHash', (hash) => {\r\n      /**\r\n       * This event means, that transaction has occurred and \r\n       * we get the transaction hash now.\r\n       */\r\n      dispatch(orderFilling())\r\n    })\r\n    .on('error', (error) => {\r\n      console.log(error)\r\n      window.alert('There was an error.')\r\n    })\r\n}\r\n\r\nexport const subscribeToEvents = async (exchange, dispatch) => {\r\n  exchange.events.Cancel({}, (err, event) => {\r\n    dispatch(orderCancelled(event.returnValues))\r\n  })\r\n\r\n  exchange.events.Trade({}, (err, event) => {\r\n    dispatch(orderFilled(event.returnValues))\r\n  })\r\n\r\n  exchange.events.Deposit({}, (err, event) => {\r\n    dispatch(balancesLoaded())\r\n  })\r\n\r\n  exchange.events.Withdraw({}, (err, event) => {\r\n    dispatch(balancesLoaded())\r\n  })\r\n\r\n  exchange.events.Order({}, (error, event) => {\r\n    dispatch(orderMade(event.returnValues))\r\n  })\r\n}\r\n\r\nexport const loadBalances = async (dispatch, web3, exchange, token, account) => {\r\n  // Ether balance in wallet\r\n  const etherBalance = await web3.eth.getBalance(account)\r\n  dispatch(etherBalanceLoaded(etherBalance))\r\n\r\n  // Token balance in wallet\r\n  const tokenBalance = await token.methods.balanceOf(account).call()\r\n  dispatch(tokenBalanceLoaded(tokenBalance))\r\n\r\n  // Ether balance in exchange\r\n  const exchangeEtherBalance = await exchange.methods.balanceOf(ETHER_ADDRESS, account).call()\r\n  dispatch(exchangeEtherBalanceLoaded(exchangeEtherBalance))\r\n\r\n  // Token balance in exchange\r\n  const exchangeTokenBalance = await exchange.methods.balanceOf(token.options.address, account).call()\r\n  dispatch(exchangeTokenBalanceLoaded(exchangeTokenBalance))\r\n\r\n  // Trigger all balances loaded\r\n  dispatch(balancesLoaded())\r\n}\r\n\r\nexport const depositEther = (dispatch, exchange, web3, amount, account) => {\r\n  exchange.methods.depositEther().send({ from: account, value: web3.utils.toWei(amount, 'ether') })\r\n    .on('transactionHash', (hash) => {\r\n      dispatch(balancesLoading())\r\n    })\r\n    .on('error', (error) => {\r\n      console.log(error)\r\n      window.alert('There was an error.')\r\n    })\r\n}\r\n\r\nexport const withdrawEther = (dispatch, exchange, web3, amount, account) => {\r\n  exchange.methods.withdrawEther(web3.utils.toWei(amount, 'ether')).send({ from: account })\r\n    .on('transactionHash', (hash) => {\r\n      dispatch(balancesLoading())\r\n    })\r\n    .on('error', (error) => {\r\n      console.log(error)\r\n      window.alert('There was an error.')\r\n    })\r\n}\r\n\r\nexport const depositToken = (dispatch, exchange, web3, token, amount, account) => {\r\n  amount = web3.utils.toWei(amount, 'ether')\r\n\r\n  token.methods.approve(exchange.options.address, amount).send({ from: account })\r\n    .on('transactionHash', (hash) => {\r\n      exchange.methods.depositToken(token.options.address, amount).send({ from: account })\r\n        .on('transactionHash', (hash) => {\r\n          dispatch(balancesLoading())\r\n        })\r\n        .on('error', (error) => {\r\n          console.log(error)\r\n          window.alert('There was an error.')\r\n        })\r\n    })\r\n}\r\n\r\nexport const withdrawToken = (dispatch, exchange, web3, token, amount, account) => {\r\n  exchange.methods.withdrawToken(token.options.address, web3.utils.toWei(amount, 'ether')).send({ from: account })\r\n    .on('transactionHash', (hash) => {\r\n      dispatch(balancesLoading())\r\n    })\r\n    .on('error', (error) => {\r\n      console.log(error)\r\n      window.alert('There was an error.')\r\n    })\r\n}\r\n\r\nexport const makeBuyOrder = (dispatch, exchange, token, web3, order, account) => {\r\n  const tokenGet = token.options.address\r\n  const amountGet = web3.utils.toWei(order.amount, 'ether')\r\n  const tokenGive = ETHER_ADDRESS\r\n  const amountGive = web3.utils.toWei((order.amount * order.price).toString(), 'ether')\r\n\r\n  exchange.methods.makeOrder(tokenGet, amountGet, tokenGive, amountGive).send({ from: account })\r\n    .on('transactionHash', (hash) => {\r\n      dispatch(buyOrderMaking())\r\n    })\r\n    .on('error', (error) => {\r\n      console.error(error)\r\n      window.alert(`There was an error!`)\r\n    })\r\n}\r\n\r\nexport const makeSellOrder = (dispatch, exchange, token, web3, order, account) => {\r\n  const tokenGet = ETHER_ADDRESS\r\n  const amountGet = web3.utils.toWei((order.amount * order.price).toString(), 'ether')\r\n  const tokenGive = token.options.address\r\n  const amountGive = web3.utils.toWei(order.amount, 'ether')\r\n\r\n  exchange.methods.makeOrder(tokenGet, amountGet, tokenGive, amountGive).send({ from: account })\r\n    .on('transactionHash', (hash) => {\r\n      dispatch(sellOrderMaking())\r\n    })\r\n    .on('error', (error) => {\r\n      console.error(error)\r\n      window.alert(`There was an error!`)\r\n    })\r\n}","import React from 'react';\r\n\r\nexport default function ({ type }) {\r\n  if (type === 'table') {\r\n    return (<tbody className='spinner-border text-light text-center'></tbody>)\r\n  } else {\r\n    return (<div className='spinner-border text-light text-center'></div>)\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  web3Selector,\r\n  exchangeSelector,\r\n  tokenSelector,\r\n  accountSelector,\r\n  etherBalanceSelector,\r\n  tokenBalanceSelector,\r\n  exchangeEtherBalanceSelector,\r\n  exchangeTokenBalanceSelector,\r\n  balancesLoadingSelector,\r\n  etherDepositAmountSelector,\r\n  etherWithdrawAmountSelector,\r\n  tokenDepositAmountSelector,\r\n  tokenWithdrawAmountSelector\r\n} from \"../store/selectors\";\r\nimport {\r\n  loadBalances,\r\n  depositEther,\r\n  withdrawEther,\r\n  depositToken,\r\n  withdrawToken\r\n} from \"../store/interactions\";\r\nimport Spinner from './Spinner';\r\nimport { Tabs, Tab } from \"react-bootstrap\";\r\nimport {\r\n  etherDepositAmountChanged,\r\n  etherWithdrawAmountChanged,\r\n  tokenDepositAmountChanged,\r\n  tokenWithdrawAmountChanged\r\n} from \"../store/actions\";\r\n\r\nconst renderForm = (props) => {\r\n  const {\r\n    dispatch,\r\n    etherBalance,\r\n    exchangeEtherBalance,\r\n    tokenBalance,\r\n    exchangeTokenBalance,\r\n    etherDepositAmount,\r\n    etherWithdrawAmount,\r\n    tokenDepositAmount,\r\n    tokenWithdrawAmount,\r\n    exchange,\r\n    web3,\r\n    account,\r\n    token\r\n  } = props\r\n\r\n  return (\r\n    <Tabs defaultActiveKey=\"deposit\" className=\"bg-dark text-white\">\r\n      <Tab eventKey=\"deposit\" title=\"Deposit\" className=\"bg-dark\">\r\n        <table className=\"table table-dark table-sm small\">\r\n          <thead>\r\n            <tr>\r\n              <th>Token</th>\r\n              <th>Wallet</th>\r\n              <th>Exchange</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>ETH</td>\r\n              <td>{etherBalance}</td>\r\n              <td>{exchangeEtherBalance}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <form className=\"row px-1\" onSubmit={(event) => {\r\n          event.preventDefault()\r\n          depositEther(dispatch, exchange, web3, etherDepositAmount, account)\r\n        }}>\r\n          <div className=\"col-12 col-sm pr-sm-2\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"ETH Amount\"\r\n              onChange={(e) => dispatch(etherDepositAmountChanged(e.target.value))}\r\n              className=\"form-control form-control-sm bg-dark text-white mb-2\"\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"col-12 col-sm-auto pl-sm-0\">\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-primary btn-block btn-sm\"\r\n            >Deposit</button>\r\n          </div>\r\n        </form>\r\n\r\n        <table className=\"table table-dark table-sm small\">\r\n          <tbody>\r\n            <tr>\r\n              <td>NEX</td>\r\n              <td>{tokenBalance}</td>\r\n              <td>{exchangeTokenBalance}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <form className=\"row px-1\" onSubmit={(event) => {\r\n          event.preventDefault()\r\n          depositToken(dispatch, exchange, web3, token, tokenDepositAmount, account)\r\n        }}>\r\n          <div className=\"col-12 col-sm pr-sm-2\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"NEX Amount\"\r\n              onChange={(e) => dispatch(tokenDepositAmountChanged(e.target.value))}\r\n              className=\"form-control form-control-sm bg-dark text-white mb-2\"\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"col-12 col-sm-auto pl-sm-0\">\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-primary btn-block btn-sm\"\r\n            >Deposit</button>\r\n          </div>\r\n        </form>\r\n      </Tab>\r\n      <Tab eventKey=\"withdraw\" title=\"Withdraw\" className=\"bg-dark\">\r\n        <table className=\"table table-dark table-sm small\">\r\n          <thead>\r\n            <tr>\r\n              <th>Token</th>\r\n              <th>Wallet</th>\r\n              <th>Exchange</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>ETH</td>\r\n              <td>{etherBalance}</td>\r\n              <td>{exchangeEtherBalance}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <form className=\"row px-1\" onSubmit={(event) => {\r\n          event.preventDefault()\r\n          withdrawEther(dispatch, exchange, web3, etherWithdrawAmount, account)\r\n        }}>\r\n          <div className=\"col-12 col-sm pr-sm-2\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"ETH Amount\"\r\n              onChange={(e) => dispatch(etherWithdrawAmountChanged(e.target.value))}\r\n              className=\"form-control form-control-sm bg-dark text-white mb-2\"\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"col-12 col-sm-auto pl-sm-0\">\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-primary btn-block btn-sm\"\r\n            >Withdraw</button>\r\n          </div>\r\n        </form>\r\n\r\n        <table className=\"table table-dark table-sm small\">\r\n          <tbody>\r\n            <tr>\r\n              <td>NEX</td>\r\n              <td>{tokenBalance}</td>\r\n              <td>{exchangeTokenBalance}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <form className=\"row px-1\" onSubmit={(event) => {\r\n          event.preventDefault()\r\n          withdrawToken(dispatch, exchange, web3, token, tokenWithdrawAmount, account)\r\n        }}>\r\n          <div className=\"col-12 col-sm pr-sm-2\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"NEX Amount\"\r\n              onChange={(e) => dispatch(tokenWithdrawAmountChanged(e.target.value))}\r\n              className=\"form-control form-control-sm bg-dark text-white mb-2\"\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"col-12 col-sm-auto pl-sm-0\">\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-primary btn-block btn-sm\"\r\n            >Withdraw</button>\r\n          </div>\r\n        </form>\r\n      </Tab>\r\n    </Tabs>\r\n  )\r\n}\r\n\r\nclass Balance extends Component {\r\n  componentDidMount() {\r\n    this.loadBlockchainData()\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const { dispatch, web3, exchange, token, account } = this.props;\r\n    await loadBalances(dispatch, web3, exchange, token, account);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card bg-dark text-white\">\r\n        <div className=\"card-header\">\r\n          Balance\r\n        </div>\r\n        <div className=\"card-body\">\r\n          {this.props.showForm ? renderForm(this.props) : <Spinner />}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  const balancesLoading = balancesLoadingSelector(state)\r\n  return {\r\n    account: accountSelector(state),\r\n    token: tokenSelector(state),\r\n    exchange: exchangeSelector(state),\r\n    web3: web3Selector(state),\r\n    etherBalance: etherBalanceSelector(state),\r\n    tokenBalance: tokenBalanceSelector(state),\r\n    exchangeEtherBalance: exchangeEtherBalanceSelector(state),\r\n    exchangeTokenBalance: exchangeTokenBalanceSelector(state),\r\n    balancesLoading,\r\n    showForm: !balancesLoading,\r\n    etherDepositAmount: etherDepositAmountSelector(state),\r\n    etherWithdrawAmount: etherWithdrawAmountSelector(state),\r\n    tokenDepositAmount: tokenDepositAmountSelector(state),\r\n    tokenWithdrawAmount: tokenWithdrawAmountSelector(state)\r\n  }\r\n}\r\n\r\n// Connect function connects the redux store to our app, \r\n// and allows access to information in component props.\r\nexport default connect(mapStateToProps)(Balance);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Tab, Tabs } from 'react-bootstrap';\r\nimport {\r\n  accountSelector,\r\n  exchangeSelector,\r\n  myFilledOrdersLoadedSelector,\r\n  myFilledOrdersSelector,\r\n  myOpenOrdersLoadedSelector,\r\n  myOpenOrdersSelector,\r\n  orderCancellingSelector\r\n} from \"../store/selectors\";\r\nimport Spinner from \"./Spinner\";\r\nimport { cancelOrder } from \"../store/interactions\";\r\n\r\nconst renderMyFilledOrders = (props) => {\r\n  const { myFilledOrders } = props\r\n  return (\r\n    <tbody>\r\n      {myFilledOrders.map((order) => {\r\n        return (\r\n          <tr key={order.id}>\r\n            <td className=\"text-muted\">{order.formattedTimestamp}</td>\r\n            <td className={`text-${order.orderTypeClass}`}>{order.orderSign}{order.tokenAmount}</td>\r\n            <td className={`text-${order.orderTypeClass}`}>{order.tokenPrice}</td>\r\n          </tr>\r\n        )\r\n      })}\r\n    </tbody>\r\n  )\r\n}\r\n\r\nconst renderMyOpenOrders = (props) => {\r\n  const { myOpenOrders, dispatch, exchange, account } = props\r\n\r\n  return (\r\n    <tbody>\r\n      {myOpenOrders.map((order) => {\r\n        return (\r\n          <tr key={order.id}>\r\n            <td className={`text-${order.orderTypeClass}`}>{order.tokenAmount}</td>\r\n            <td className={`text-${order.orderTypeClass}`}>{order.tokenPrice}</td>\r\n            <td\r\n              className=\"text-muted cancel-order\"\r\n              onClick={(e) => {\r\n                cancelOrder(dispatch, exchange, order, account)\r\n              }}\r\n            >X</td>\r\n          </tr>\r\n        )\r\n      })}\r\n    </tbody>\r\n  )\r\n}\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"card bg-dark text-white\">\r\n        <div className=\"card-header\">\r\n          My Transactions\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <Tabs defaultActiveKey=\"trades\" className=\"bg-dark text-white\">\r\n            <Tab eventKey=\"trades\" title=\"Trades\" className=\"bg-dark\">\r\n              <table className=\"table table-dark table-sm small\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Time</th>\r\n                    <th>NEX</th>\r\n                    <th>NEX/ETH</th>\r\n                  </tr>\r\n                </thead>\r\n                {this.props.showMyFilledOrders ? renderMyFilledOrders(this.props) : <Spinner type=\"table\" />}\r\n              </table>\r\n            </Tab>\r\n            <Tab eventKey=\"orders\" title=\"Orders\">\r\n              <table className=\"table table-dark table-sm small\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Amount</th>\r\n                    <th>NEX/ETH</th>\r\n                    <th>Cancel</th>\r\n                  </tr>\r\n                </thead>\r\n                {this.props.showMyOpenOrders ? renderMyOpenOrders(this.props) : <Spinner type=\"table\" />}\r\n              </table>\r\n            </Tab>\r\n          </Tabs>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  const myOpenOrdersLoaded =  myOpenOrdersLoadedSelector(state)\r\n  const orderCancelling = orderCancellingSelector(state)\r\n\r\n  return {\r\n    myFilledOrders: myFilledOrdersSelector(state),\r\n    showMyFilledOrders: myFilledOrdersLoadedSelector(state),\r\n    myOpenOrders: myOpenOrdersSelector(state),\r\n    showMyOpenOrders: myOpenOrdersLoaded && !orderCancelling,\r\n    exchange: exchangeSelector(state),\r\n    account: accountSelector(state)\r\n  }\r\n}\r\n\r\n// Connect function connects the redux store to our app, \r\n// and allows access to information in component props.\r\nexport default connect(mapStateToProps)(Navbar);\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Tabs, Tab } from 'react-bootstrap'\r\nimport Spinner from './Spinner'\r\nimport {\r\n  exchangeSelector,\r\n  tokenSelector,\r\n  accountSelector,\r\n  web3Selector,\r\n  buyOrderSelector,\r\n  sellOrderSelector\r\n} from '../store/selectors'\r\nimport {\r\n  buyOrderAmountChanged,\r\n  buyOrderPriceChanged,\r\n  sellOrderAmountChanged,\r\n  sellOrderPriceChanged,\r\n} from '../store/actions'\r\nimport {\r\n  makeBuyOrder,\r\n  makeSellOrder\r\n} from '../store/interactions'\r\n\r\nconst renderForm = (props) => {\r\n  const {\r\n    dispatch,\r\n    buyOrder,\r\n    exchange,\r\n    token,\r\n    web3,\r\n    account,\r\n    sellOrder,\r\n    showBuyTotal,\r\n    showSellTotal\r\n  } = props\r\n\r\n  return(\r\n    <Tabs defaultActiveKey=\"buy\" className=\"bg-dark text-white\">\r\n\r\n      <Tab eventKey=\"buy\" title=\"Buy\" className=\"bg-dark px-1 py-2\">\r\n\r\n          <form onSubmit={(event) => {\r\n            event.preventDefault()\r\n            makeBuyOrder(dispatch, exchange, token, web3, buyOrder, account)\r\n          }}>\r\n          <div className=\"form-group small\">\r\n            <label>Buy Amount (NEX)</label>\r\n            <div className=\"input-group\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control form-control-sm bg-dark text-white mb-2\"\r\n                placeholder=\"Buy Amount\"\r\n                onChange={(e) => dispatch( buyOrderAmountChanged( e.target.value ) )}\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group small\">\r\n            <label>Buy Price</label>\r\n            <div className=\"input-group\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control form-control-sm bg-dark text-white mb-2\"\r\n                placeholder=\"Buy Price\"\r\n                onChange={(e) => dispatch( buyOrderPriceChanged( e.target.value ) )}\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary btn-sm w-100\">Buy Order</button>\r\n          { showBuyTotal ? <small>Total: {buyOrder.amount * buyOrder.price} ETH</small> : null }\r\n        </form>\r\n\r\n      </Tab>\r\n\r\n      <Tab eventKey=\"sell\" title=\"Sell\" className=\"bg-dark px-1 py-2\">\r\n\r\n        <form onSubmit={(event) => {\r\n          event.preventDefault()\r\n          makeSellOrder(dispatch, exchange, token, web3, sellOrder, account)\r\n        }}>\r\n        <div className=\"form-group small\">\r\n          <label>Sell Amount (NEX)</label>\r\n          <div className=\"input-group\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control form-control-sm bg-dark text-white mb-2\"\r\n              placeholder=\"Sell amount\"\r\n              onChange={(e) => dispatch( sellOrderAmountChanged( e.target.value ) )}\r\n              required\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group small\">\r\n          <label>Sell Price</label>\r\n          <div className=\"input-group\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control form-control-sm bg-dark text-white mb-2\"\r\n              placeholder=\"Sell Price\"\r\n              onChange={(e) => dispatch( sellOrderPriceChanged( e.target.value ) )}\r\n              required\r\n            />\r\n          </div>\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary btn-sm w-100\">Sell Order</button>\r\n        { showSellTotal ? <small>Total: {sellOrder.amount * sellOrder.price} ETH</small> : null }\r\n      </form>\r\n\r\n      </Tab>\r\n    </Tabs>\r\n  )\r\n}\r\n\r\nclass NewOrder extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card bg-dark text-white\">\r\n        <div className=\"card-header\">\r\n          New Order\r\n        </div>\r\n        <div className=\"card-body\">\r\n          {this.props.showForm ? renderForm(this.props) : <Spinner />}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const buyOrder = buyOrderSelector(state)\r\n  const sellOrder = sellOrderSelector(state)\r\n\r\n  return {\r\n    account: accountSelector(state),\r\n    exchange: exchangeSelector(state),\r\n    token: tokenSelector(state),\r\n    web3: web3Selector(state),\r\n    buyOrder,\r\n    sellOrder,\r\n    showForm: !buyOrder.making && !sellOrder.making,\r\n    showBuyTotal: buyOrder.amount && buyOrder.price,\r\n    showSellTotal: sellOrder.amount && sellOrder.price\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(NewOrder)\r\n","import { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Spinner from \"./Spinner\";\r\nimport {\r\n  orderBookSelector,\r\n  orderBookLoadedSelector,\r\n  exchangeSelector,\r\n  accountSelector,\r\n  orderFillingSelector\r\n} from '../store/selectors'\r\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { fillOrder } from \"../store/interactions\";\r\n\r\nconst renderOrder = (order, props) => {\r\n  const { dispatch, exchange, account } = props\r\n\r\n  return (\r\n    <OverlayTrigger\r\n      key={order.id}\r\n      placement=\"auto\"\r\n      overlay={\r\n        <Tooltip id={order.id}>\r\n          {`Click here to ${order.orderFillAction}`}\r\n        </Tooltip>\r\n      }\r\n    >\r\n      <tr\r\n        key={order.id}\r\n        className=\"order-book-order\"\r\n        onClick={(e) => {\r\n          fillOrder(dispatch, exchange, order, account)\r\n        }}\r\n      >\r\n        <td>{order.tokenAmount}</td>\r\n        <td className={`text-${order.orderTypeClass}`}>{order.tokenPrice}</td>\r\n        <td>{order.etherAmount}</td>\r\n      </tr>\r\n    </OverlayTrigger>\r\n  )\r\n}\r\n\r\nconst renderOrderBook = (props) => {\r\n  const { orderBook } = props\r\n  return (\r\n    <tbody>\r\n      {orderBook.sellOrders.map((order) => renderOrder(order, props))}\r\n      <tr>\r\n        <th>NEX</th>\r\n        <th>NEX/ETH</th>\r\n        <th>ETH</th>\r\n      </tr>\r\n      {orderBook.buyOrders.map((order) => renderOrder(order, props))}\r\n    </tbody>\r\n  )\r\n}\r\n\r\nclass OrderBook extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"vertical\">\r\n        <div className=\"card bg-dark text-white\">\r\n          <div className=\"card-header\">\r\n            Order Book\r\n          </div>\r\n          <div className=\"card-body order-book\">\r\n            <table className=\"table table-dark table-sm small\">\r\n              {this.props.showOrderBook ? renderOrderBook(this.props) : <Spinner type=\"table\" />}\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  const orderBookLoaded = orderBookLoadedSelector(state)\r\n  const orderFilling = orderFillingSelector(state)\r\n\r\n  return {\r\n    orderBook: orderBookSelector(state),\r\n    showOrderBook: orderBookLoaded && !orderFilling,\r\n    exchange: exchangeSelector(state),\r\n    account: accountSelector(state)\r\n  }\r\n}\r\n\r\n// Connect function connects the redux store to our app, \r\n// and allows access to information in component props.\r\nexport default connect(mapStateToProps)(OrderBook);\r\n","export const chartOptions = {\r\n  chart: {\r\n    animations: { enabled: false },\r\n    toolbar: { show: false },\r\n    width: '100px'\r\n  },\r\n  plotOptions: {\r\n    candlestick: {\r\n      colors: {\r\n        upward: '#00c896',\r\n        downward: '#dc3545'\r\n      }\r\n    }\r\n  },\r\n  tooltip: {\r\n    enabled: true,\r\n    theme: false,\r\n    style: {\r\n      fontSize: '12px',\r\n      fontFamily: undefined\r\n    },\r\n    x: {\r\n      show: false,\r\n      format: 'dd MMM',\r\n      formatter: undefined,\r\n    },\r\n    y: {\r\n      show: true,\r\n      title: 'price'\r\n    },\r\n    marker: {\r\n      show: false,\r\n    },\r\n    items: {\r\n      display: 'flex',\r\n    },\r\n    fixed: {\r\n      enabled: false,\r\n      position: 'topRight',\r\n      offsetX: 0,\r\n      offsetY: 0,\r\n    },\r\n  },\r\n  xaxis: {\r\n    type: 'datetime',\r\n    labels: {\r\n      show: true,\r\n      style: {\r\n        colors: '#fff',\r\n        fontSize: '12px',\r\n        cssClass: 'apexcharts-xaxis-label',\r\n      },\r\n    },\r\n  },\r\n  yaxis: {\r\n    labels: {\r\n      show: true,\r\n      minWidth: 0,\r\n      maxWidth: 160,\r\n      style: {\r\n        colors: '#fff',\r\n        fontSize: '12px',\r\n        cssClass: 'apexcharts-yaxis-label',\r\n      },\r\n      offsetX: 0,\r\n      offsetY: 0,\r\n      rotate: 0,\r\n    }\r\n  }\r\n}\r\n\r\nexport const dummyData = [\r\n  {\r\n    data: [\r\n      {\r\n        x: new Date(1538778600000),\r\n        y: [6629.81, 6650.5, 6623.04, 6633.33]\r\n      },\r\n      {\r\n        x: new Date(1538780400000),\r\n        y: [6632.01, 6643.59, 6620, 6630.11]\r\n      },\r\n      {\r\n        x: new Date(1538782200000),\r\n        y: [6630.71, 6648.95, 6623.34, 6635.65]\r\n      },\r\n      {\r\n        x: new Date(1538784000000),\r\n        y: [6635.65, 6651, 6629.67, 6638.24]\r\n      },\r\n      {\r\n        x: new Date(1538785800000),\r\n        y: [6638.24, 6640, 6620, 6624.47]\r\n      },\r\n      {\r\n        x: new Date(1538787600000),\r\n        y: [6624.53, 6636.03, 6621.68, 6624.31]\r\n      },\r\n      {\r\n        x: new Date(1538789400000),\r\n        y: [6624.61, 6632.2, 6617, 6626.02]\r\n      },\r\n      {\r\n        x: new Date(1538791200000),\r\n        y: [6627, 6627.62, 6584.22, 6603.02]\r\n      },\r\n      {\r\n        x: new Date(1538793000000),\r\n        y: [6605, 6608.03, 6598.95, 6604.01]\r\n      },\r\n      {\r\n        x: new Date(1538794800000),\r\n        y: [6604.5, 6614.4, 6602.26, 6608.02]\r\n      },\r\n      {\r\n        x: new Date(1538796600000),\r\n        y: [6608.02, 6610.68, 6601.99, 6608.91]\r\n      },\r\n      {\r\n        x: new Date(1538798400000),\r\n        y: [6608.91, 6618.99, 6608.01, 6612]\r\n      },\r\n      {\r\n        x: new Date(1538800200000),\r\n        y: [6612, 6615.13, 6605.09, 6612]\r\n      },\r\n      {\r\n        x: new Date(1538802000000),\r\n        y: [6612, 6624.12, 6608.43, 6622.95]\r\n      },\r\n      {\r\n        x: new Date(1538803800000),\r\n        y: [6623.91, 6623.91, 6615, 6615.67]\r\n      },\r\n      {\r\n        x: new Date(1538805600000),\r\n        y: [6618.69, 6618.74, 6610, 6610.4]\r\n      },\r\n      {\r\n        x: new Date(1538807400000),\r\n        y: [6611, 6622.78, 6610.4, 6614.9]\r\n      },\r\n      {\r\n        x: new Date(1538809200000),\r\n        y: [6614.9, 6626.2, 6613.33, 6623.45]\r\n      },\r\n      {\r\n        x: new Date(1538811000000),\r\n        y: [6623.48, 6627, 6618.38, 6620.35]\r\n      },\r\n      {\r\n        x: new Date(1538812800000),\r\n        y: [6619.43, 6620.35, 6610.05, 6615.53]\r\n      },\r\n      {\r\n        x: new Date(1538814600000),\r\n        y: [6615.53, 6617.93, 6610, 6615.19]\r\n      },\r\n      {\r\n        x: new Date(1538816400000),\r\n        y: [6615.19, 6621.6, 6608.2, 6620]\r\n      },\r\n      {\r\n        x: new Date(1538818200000),\r\n        y: [6619.54, 6625.17, 6614.15, 6620]\r\n      },\r\n      {\r\n        x: new Date(1538820000000),\r\n        y: [6620.33, 6634.15, 6617.24, 6624.61]\r\n      },\r\n      {\r\n        x: new Date(1538821800000),\r\n        y: [6625.95, 6626, 6611.66, 6617.58]\r\n      },\r\n      {\r\n        x: new Date(1538823600000),\r\n        y: [6619, 6625.97, 6595.27, 6598.86]\r\n      },\r\n      {\r\n        x: new Date(1538825400000),\r\n        y: [6598.86, 6598.88, 6570, 6587.16]\r\n      },\r\n      {\r\n        x: new Date(1538827200000),\r\n        y: [6588.86, 6600, 6580, 6593.4]\r\n      },\r\n      {\r\n        x: new Date(1538829000000),\r\n        y: [6593.99, 6598.89, 6585, 6587.81]\r\n      },\r\n      {\r\n        x: new Date(1538830800000),\r\n        y: [6587.81, 6592.73, 6567.14, 6578]\r\n      },\r\n      {\r\n        x: new Date(1538832600000),\r\n        y: [6578.35, 6581.72, 6567.39, 6579]\r\n      },\r\n      {\r\n        x: new Date(1538834400000),\r\n        y: [6579.38, 6580.92, 6566.77, 6575.96]\r\n      },\r\n      {\r\n        x: new Date(1538836200000),\r\n        y: [6575.96, 6589, 6571.77, 6588.92]\r\n      },\r\n      {\r\n        x: new Date(1538838000000),\r\n        y: [6588.92, 6594, 6577.55, 6589.22]\r\n      },\r\n      {\r\n        x: new Date(1538839800000),\r\n        y: [6589.3, 6598.89, 6589.1, 6596.08]\r\n      },\r\n      {\r\n        x: new Date(1538841600000),\r\n        y: [6597.5, 6600, 6588.39, 6596.25]\r\n      },\r\n      {\r\n        x: new Date(1538843400000),\r\n        y: [6598.03, 6600, 6588.73, 6595.97]\r\n      },\r\n      {\r\n        x: new Date(1538845200000),\r\n        y: [6595.97, 6602.01, 6588.17, 6602]\r\n      },\r\n      {\r\n        x: new Date(1538847000000),\r\n        y: [6602, 6607, 6596.51, 6599.95]\r\n      },\r\n      {\r\n        x: new Date(1538848800000),\r\n        y: [6600.63, 6601.21, 6590.39, 6591.02]\r\n      },\r\n      {\r\n        x: new Date(1538850600000),\r\n        y: [6591.02, 6603.08, 6591, 6591]\r\n      },\r\n      {\r\n        x: new Date(1538852400000),\r\n        y: [6591, 6601.32, 6585, 6592]\r\n      },\r\n      {\r\n        x: new Date(1538854200000),\r\n        y: [6593.13, 6596.01, 6590, 6593.34]\r\n      },\r\n      {\r\n        x: new Date(1538856000000),\r\n        y: [6593.34, 6604.76, 6582.63, 6593.86]\r\n      },\r\n      {\r\n        x: new Date(1538857800000),\r\n        y: [6593.86, 6604.28, 6586.57, 6600.01]\r\n      },\r\n      {\r\n        x: new Date(1538859600000),\r\n        y: [6601.81, 6603.21, 6592.78, 6596.25]\r\n      },\r\n      {\r\n        x: new Date(1538861400000),\r\n        y: [6596.25, 6604.2, 6590, 6602.99]\r\n      },\r\n      {\r\n        x: new Date(1538863200000),\r\n        y: [6602.99, 6606, 6584.99, 6587.81]\r\n      },\r\n      {\r\n        x: new Date(1538865000000),\r\n        y: [6587.81, 6595, 6583.27, 6591.96]\r\n      },\r\n      {\r\n        x: new Date(1538866800000),\r\n        y: [6591.97, 6596.07, 6585, 6588.39]\r\n      },\r\n      {\r\n        x: new Date(1538868600000),\r\n        y: [6587.6, 6598.21, 6587.6, 6594.27]\r\n      },\r\n      {\r\n        x: new Date(1538870400000),\r\n        y: [6596.44, 6601, 6590, 6596.55]\r\n      },\r\n      {\r\n        x: new Date(1538872200000),\r\n        y: [6598.91, 6605, 6596.61, 6600.02]\r\n      },\r\n      {\r\n        x: new Date(1538874000000),\r\n        y: [6600.55, 6605, 6589.14, 6593.01]\r\n      },\r\n      {\r\n        x: new Date(1538875800000),\r\n        y: [6593.15, 6605, 6592, 6603.06]\r\n      },\r\n      {\r\n        x: new Date(1538877600000),\r\n        y: [6603.07, 6604.5, 6599.09, 6603.89]\r\n      },\r\n      {\r\n        x: new Date(1538879400000),\r\n        y: [6604.44, 6604.44, 6600, 6603.5]\r\n      },\r\n      {\r\n        x: new Date(1538881200000),\r\n        y: [6603.5, 6603.99, 6597.5, 6603.86]\r\n      },\r\n      {\r\n        x: new Date(1538883000000),\r\n        y: [6603.85, 6605, 6600, 6604.07]\r\n      },\r\n      {\r\n        x: new Date(1538884800000),\r\n        y: [6604.98, 6606, 6604.07, 6606]\r\n      },\r\n    ]\r\n  }\r\n]\r\n","import { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { priceChartLoadedSelector, priceChartSelector } from \"../store/selectors\";\r\nimport Chart from 'react-apexcharts';\r\nimport { chartOptions } from './PriceChart.config';\r\nimport Spinner from './Spinner';\r\n\r\nconst priceSymbol = (lastPriceChange) => {\r\n  let output\r\n  if(lastPriceChange === '+') {\r\n    output = <span className=\"text-success\">&#9650;</span> // Green up triangle\r\n  } else {\r\n    output = <span className=\"text-danger\">&#9660;</span> // Red down triangle\r\n  }\r\n  return output\r\n}\r\n\r\nconst renderPriceChart = (priceChart) => {\r\n  return (\r\n    <div className=\"price-chart\">\r\n      <div className=\"price\">\r\n        <h4 className=\"mb-0 mt-2\">NEX/ETH &nbsp; {priceSymbol(priceChart.lastPriceChange)} &nbsp; {priceChart.lastPrice}</h4>\r\n      </div>\r\n      <Chart\r\n        options={chartOptions}\r\n        series={priceChart.series}\r\n        type='candlestick'\r\n        width='100%'\r\n        height='100%'\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nclass PriceChart extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"card bg-dark text-white\">\r\n        <div className=\"card-header\">\r\n          Price Chart\r\n        </div>\r\n        <div className=\"card-body\">\r\n          {this.props.priceChartLoaded ? renderPriceChart(this.props.priceChart) : <Spinner />}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    priceChart: priceChartSelector(state),\r\n    priceChartLoaded: priceChartLoadedSelector(state)\r\n  }\r\n}\r\n\r\n// Connect function connects the redux store to our app, \r\n// and allows access to information in component props.\r\nexport default connect(mapStateToProps)(PriceChart);\r\n","import { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { filledOrdersLoadedSelector, filledOrdersSelector } from \"../store/selectors\";\r\nimport Spinner from './Spinner';\r\n\r\nconst renderFilledOrders = (filledOrders) => {\r\n  return (\r\n    <tbody>\r\n      {filledOrders.map((order) => {\r\n        return (\r\n          <tr className={`order-${order.id}`} key={order.id}>\r\n            <td className=\"text-muted\">{order.formattedTimestamp}</td>\r\n            <td>{order.tokenAmount}</td>\r\n            <td className={`text-${order.tokenPriceClass}`}>{order.tokenPrice}</td>\r\n          </tr>\r\n        )\r\n      })}\r\n    </tbody>\r\n  )\r\n}\r\n\r\nclass Trades extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"vertical\">\r\n        <div className=\"card bg-dark text-white\">\r\n          <div className=\"card-header\">\r\n            Trades\r\n          </div>\r\n          <div className=\"card-body\">\r\n            <table className=\"table table-dark table-sm small\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Time</th>\r\n                  <th>NEX</th>\r\n                  <th>NEX/ETH</th>\r\n                </tr>\r\n              </thead>\r\n              {this.props.filledOrdersLoaded ? renderFilledOrders(this.props.filledOrders) : <Spinner type=\"table\" />}\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    filledOrdersLoaded: filledOrdersLoadedSelector(state),\r\n    filledOrders: filledOrdersSelector(state)\r\n  }\r\n}\r\n\r\n// Connect function connects the redux store to our app, \r\n// and allows access to information in component props.\r\nexport default connect(mapStateToProps)(Trades);\r\n","import { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { loadAllOrders, subscribeToEvents } from \"../store/interactions\";\r\nimport { exchangeSelector } from \"../store/selectors\";\r\nimport Balance from \"./Balance\";\r\nimport MyTransactions from \"./MyTransactions\";\r\nimport NewOrder from \"./NewOrder\";\r\nimport OrderBook from \"./OrderBook\";\r\nimport PriceChart from \"./PriceChart\";\r\nimport Trades from './Trades';\r\n\r\nclass Content extends Component {\r\n  componentDidMount() {\r\n    this.loadBlockchainData(this.props)\r\n  }\r\n\r\n  async loadBlockchainData(props) {\r\n    const { dispatch, exchange } = props\r\n    await loadAllOrders(exchange, dispatch);\r\n    await subscribeToEvents(exchange, dispatch);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"content bg-secondary\">\r\n        <div className=\"vertical-split\">\r\n          <Balance />\r\n          <NewOrder />\r\n        </div>\r\n        <OrderBook />\r\n        <div className=\"vertical-split\">\r\n          <PriceChart />\r\n          <MyTransactions />\r\n        </div>\r\n        <Trades />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    exchange: exchangeSelector(state)\r\n  }\r\n}\r\n\r\n// Connect function connects the redux store to our app, \r\n// and allows access to information in component props.\r\nexport default connect(mapStateToProps)(Content);\r\n","import React, { Component } from 'react';\nimport './app.scss';\nimport Navbar from './Navbar';\nimport Content from './Content';\nimport { loadAccount, loadExchange, loadToken, loadWeb3 } from '../store/interactions';\nimport { connect } from 'react-redux';\nimport { contractsLoadedSelector } from '../store/selectors';\n\nclass App extends Component {\n  componentDidMount() {\n    this.loadBlockchainData(this.props.dispatch)\n  }\n\n  async loadBlockchainData(dispatch) {\n    const web3 = loadWeb3(dispatch)\n    const networkId = await web3.eth.net.getId()\n\n    /**\n     * Load account, token and exchange.\n     * Alert the user if any of the above is not loaded.\n     */\n    await loadAccount(web3, dispatch)\n    const token = await loadToken(web3, networkId, dispatch)\n    if(!token) {\n      window.alert('Token smart contract not detected on the current network. Please seleect another network with Metamask.')\n      return\n    }\n\n    const exchange = await loadExchange(web3, networkId, dispatch)\n    if(!exchange) {\n      window.alert('Exchange smart contract not detected on the current network. Please seleect another network with Metamask.')\n      return\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar />\n        {this.props.contractsLoaded ? <Content /> : <div className='content'></div>}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    contractsLoaded: contractsLoadedSelector(state)\n  }\n}\n\n// Connect function connects the redux store to our app, \n// and allows access to information in component props.\nexport default connect(mapStateToProps)(App);\n","/**\r\n * For personal reference,\r\n * Reducers, in React, are a little similar to Vue.js mutations, \r\n * but it also has a lot of differences.\r\n * A reducer is, as you may already know, one function that \r\n * accepts the `previous state` and the `action`, and returns the `next state`.\r\n * \r\n * In the following,\r\n * Each function is a reducer, which are all combined to create a rootReducer.\r\n */\r\nimport { combineReducers } from 'redux'\r\n\r\nfunction web3(state = {}, action) {\r\n  switch (action.type) {\r\n    case 'WEB3_LOADED':\r\n      return { ...state, connection: action.connection }\r\n    case 'WEB3_ACCOUNT_LOADED':\r\n      return { ...state, account: action.account }\r\n    case 'ETHER_BALANCE_LOADED':\r\n      return { ...state, balance: action.balance }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction token(state = {}, action) {\r\n  switch (action.type) {\r\n    case 'TOKEN_LOADED':\r\n      return { ...state, loaded: true, contract: action.contract }\r\n    case 'TOKEN_BALANCE_LOADED':\r\n      return { ...state, balance: action.balance }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction exchange(state = {}, action) {\r\n  let index, data;\r\n\r\n  switch (action.type) {\r\n    case 'EXCHANGE_LOADED':\r\n      return { ...state, loaded: true, contract: action.contract }\r\n    case 'CANCELLED_ORDERS_LOADED':\r\n      return { ...state, cancelledOrders: { loaded: true, data: action.cancelledOrders } }\r\n    case 'FILLED_ORDERS_LOADED':\r\n      return { ...state, filledOrders: { loaded: true, data: action.filledOrders } }\r\n    case 'ALL_ORDERS_LOADED':\r\n      return { ...state, allOrders: { loaded: true, data: action.allOrders } }\r\n    case 'ORDER_CANCELLING':\r\n      return { ...state, orderCancelling: true }\r\n    case 'ORDER_CANCELLED':\r\n      // Append the cancelled order to the cancelledOrder.data\r\n      return {\r\n        ...state,\r\n        orderCancelling: false,\r\n        cancelledOrders: {\r\n          ...state.cancelledOrders,\r\n          data: [\r\n            ...state.cancelledOrders.data,\r\n            action.order\r\n          ]\r\n        }\r\n      }\r\n    case 'ORDER_FILLED':\r\n      // Prevent duplicate orders\r\n      index = state.filledOrders.data.findIndex(order => order.id === action.order.id)\r\n\r\n      if (index === -1) {\r\n        // Only add a new order to data if this order is not present in the filledOrders \r\n        data = [...state.filledOrders.data, action.order]\r\n      } else {\r\n        data = state.filledOrders.data\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        orderFilling: false,\r\n        filledOrders: {\r\n          ...state.filledOrders,\r\n          data\r\n        }\r\n      }\r\n    case 'ORDER_FILLING':\r\n      return { ...state, orderFilling: true }\r\n    case 'EXCHANGE_ETHER_BALANCE_LOADED':\r\n      return { ...state, etherBalance: action.balance }\r\n    case 'EXCHANGE_TOKEN_BALANCE_LOADED':\r\n      return { ...state, tokenBalance: action.balance }\r\n    case 'BALANCES_LOADING':\r\n      return { ...state, balancesLoading: true }\r\n    case 'BALANCES_LOADED':\r\n      return { ...state, balancesLoading: false }\r\n    case 'ETHER_DEPOSIT_AMOUNT_CHANGED':\r\n      return { ...state, etherDepositAmount: action.amount }\r\n    case 'ETHER_WITHDRAW_AMOUNT_CHANGED':\r\n      return { ...state, etherWithdrawAmount: action.amount }\r\n    case 'TOKEN_DEPOSIT_AMOUNT_CHANGED':\r\n      return { ...state, tokenDepositAmount: action.amount }\r\n    case 'TOKEN_WITHDRAW_AMOUNT_CHANGED':\r\n      return { ...state, tokenWithdrawAmount: action.amount }\r\n\r\n    case 'BUY_ORDER_AMOUNT_CHANGED':\r\n      return { ...state, buyOrder: { ...state.buyOrder, amount: action.amount } }\r\n    case 'BUY_ORDER_PRICE_CHANGED':\r\n      return { ...state, buyOrder: { ...state.buyOrder, price: action.price } }\r\n    case 'BUY_ORDER_MAKING':\r\n      return { ...state, buyOrder: { ...state.buyOrder, amount: null, price: null, making: true } }\r\n\r\n    case 'ORDER_MADE':\r\n      // Prevent duplicate orders\r\n      index = state.allOrders.data.findIndex(order => order.id === action.order.id);\r\n\r\n      if (index === -1) {\r\n        data = [...state.allOrders.data, action.order]\r\n      } else {\r\n        data = state.allOrders.data\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        allOrders: {\r\n          ...state.allOrders,\r\n          data\r\n        },\r\n        buyOrder: {\r\n          ...state.buyOrder,\r\n          making: false\r\n        },\r\n        sellOrder: {\r\n          ...state.sellOrder,\r\n          making: false\r\n        }\r\n      }\r\n\r\n    case 'SELL_ORDER_AMOUNT_CHANGED':\r\n      return { ...state, sellOrder: { ...state.sellOrder, amount: action.amount } }\r\n    case 'SELL_ORDER_PRICE_CHANGED':\r\n      return { ...state, sellOrder: { ...state.sellOrder, price: action.price } }\r\n    case 'SELL_ORDER_MAKING':\r\n      return { ...state, sellOrder: { ...state.sellOrder, amount: null, price: null, making: true } }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  web3,\r\n  token,\r\n  exchange\r\n})\r\n\r\nexport default rootReducer","/**\r\n * Some middleware to create a store to be used in application.\r\n */\r\n\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst loggerMiddleware = createLogger()\r\nconst middleware = []\r\n\r\n// For Redux devtools\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nexport default function configureStore(preloadedState) {\r\n  return createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    composeEnhancers(applyMiddleware(...middleware, loggerMiddleware))\r\n  )\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/configureStore';\nimport reportWebVitals from './reportWebVitals';\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}